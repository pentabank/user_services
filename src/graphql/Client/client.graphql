type Query {
  greetings: String
  allClients: [Client]
  objectionCreationError: String!
}

type Mutation {
  addClient(client: ClientCreationInput!): ID!
  deleteClient(id: ID!): Message!
  updateClient(client: ClientCreationInput!): Client!
  login(email: String!, password: String!): AuthPayload
}

type Message {
  code: Int!
  message: String!
}

type AuthPayload {
  user: Client
  token: String
}

scalar Date

type Client {
  id: ID
  firstName: String
  lastName: String
  dateOfBirth: Date
  CIN: String
  address: String
  phoneNumber: String
  createdAt: Date
  isActive: Boolean
  age: Int
  email: String
}

input ClientCreationInput {
  firstName: String!
  lastName: String!
  dateOfBirth: Date!
  CIN: String!
  address: String!
  phoneNumber: String!
  createdAt: Date!
  isActive: Boolean!
  age: Int!
  email: String!
  password: String!
  confirmPassword: String!
}

input ClientUpdateInput {
  firstName: String!
  lastName: String!
  dateOfBirth: Date!
  CIN: String!
  address: String!
  phoneNumber: String!
  isActive: Boolean!
  age: Int!
  password: String!
  confirmPassword: String!
}
