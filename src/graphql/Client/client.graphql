type Query {
  greetings: String
  allClients: [Client]
<<<<<<< Updated upstream:src/graphql/Client/client.graphql
}

type Mutation {
  addClient(client: ClientCreationInput!): ID!
  deleteClient(id: ID!): Message!
  updateClient(client: ClientCreationInput!): Client!
  login(email: String!, password: String!): AuthPayload
=======
  findClientByIdOrEmail(
    id: ID
    email: String
  ): Client
  login(
    email: String!
    userPassword: String!
  ): String!
  regenerateToken(userId: String!): Message!
}

type Mutation {
  addClient(client: ClientCreationInput!): Client!
  deleteClientById(id: ID!): Client
  updateClient(
    client: ClientUpdateInput!
  ): Client!
  signup(client: ClientCreationInput!): String!
  activeAccount(
    id: String!
    otpCode: String!
  ): Boolean!
>>>>>>> Stashed changes:src/graphql/schema/client.graphql
}

type Message {
  code: Int!
  message: String!
}

scalar Date

type Client {
  _id: ID
  firstName: String
  lastName: String
  dateOfBirth: Date
  CIN: String
  address: String
  phoneNumber: String
  isActive: Boolean
  age: Int
  email: String
}

input ClientCreationInput {
  id: ID!
  firstName: String!
  lastName: String!
  dateOfBirth: Date!
  CIN: String!
  address: String!
  phoneNumber: String!
  age: Int!
  email: String!
  password: String!
  confirmPassword: String!
}
